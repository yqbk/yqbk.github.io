{"version":3,"sources":["helpers/apiErrorHandler.js","helpers/fetchAPI.js","actions/getCompanyInfoActions.js","reducers/companyInfoReducer.js","reducers/index.js","components/trackNewCompany/TrackNewCompany.js","components/companies/companyInfo/CompanyInfo.js","components/companies/Companies.js","components/main/App.js","serviceWorker.js","index.js"],"names":["handleErrors","response","ok","Error","statusText","fetchAPI","API","fetch","then","json","API_KEY","fetchCompanyInfo","company","dispatch","SYMBOL_SEARCH_API","concat","AUTOCOMPLETE_API","getCompanyInfo","data","symbol","bestMatch","bestMatches","dataExtended","Object","keys","includes","autocompleteData","getCompanyInfoSuccess","objectSpread","filter","autocompleteMatch","name","toUpperCase","split","catch","error","alert","getCompanyInfoFailure","GET_COMPANY_INFO","GET_COMPANY_INFO_SUCCESS","GET_COMPANY_INFO_FAILURE","searchValue","type","payload","initialState","companies","loading","combineReducers","companyInfo","state","arguments","length","undefined","action","companyData","fetchedCompany","region","time","price","Math","round","currency","change","slice","closed","domain","logo","map","toConsumableArray","TrackNewCompany","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","changeTab","react_default","a","createElement","Form","inline","onSubmit","className","FormControl","placeholder","onChange","Button","Component","connect","CompanyInfo","_ref","src","alt","Companies","onClick","companyInfo_CompanyInfo","key","App","switchToTackNewCompany","isActive","trackNewCompanyIsActive","_this2","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","trackNewCompany_TrackNewCompany","companies_Companies","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","components_main_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7b8187c.chunk.js","sourcesContent":["// Handle HTTP errors\nexport default function handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response;\n}\n","import handleErrors from \"./apiErrorHandler\";\n\nexport const fetchAPI = API =>\n  fetch(API)\n    .then(handleErrors)\n    .then(response => response.json());\n","import { fetchAPI } from \"../helpers/fetchAPI\";\n\n// Sunscrapers encoded in Base64\nconst API_KEY = \"U3Vuc2NyYXBlcnM=\";\n\nexport function fetchCompanyInfo(company) {\n  return dispatch => {\n    const SYMBOL_SEARCH_API = `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${company}&apikey=${API_KEY}`;\n    const QUOTE_API = symbol =>\n      `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;\n    const AUTOCOMPLETE_API = `https://autocomplete.clearbit.com/v1/companies/suggest?query=${company}`;\n\n    dispatch(getCompanyInfo(company));\n\n    // Get basic information using SEARCH API\n    return fetchAPI(SYMBOL_SEARCH_API)\n      .then(data => {\n        const bestMatch = data.bestMatches[0];\n\n        if (!bestMatch) {\n          throw new Error(\"No company with such name.\");\n        }\n\n        // Get extended information using Quote API\n        return fetchAPI(QUOTE_API(bestMatch[\"1. symbol\"])).then(\n          dataExtended => {\n            if (Object.keys(dataExtended).includes(\"Note\")) {\n              throw new Error(\"API request limit, you need to wait 1 min.\");\n            }\n            // Get image and url using Autocomplete API\n            return fetchAPI(AUTOCOMPLETE_API).then(autocompleteData => {\n              return dispatch(\n                getCompanyInfoSuccess({\n                  ...bestMatch,\n                  ...dataExtended[\"Global Quote\"],\n                  // Try to mach company name in autocomplete response to get company logo and url\n                  ...autocompleteData.filter(autocompleteMatch => {\n                    return (\n                      // Check if first uppercase name in both responses are matching\n                      autocompleteMatch.name.toUpperCase() ===\n                      bestMatch[\"2. name\"].split(\" \")[0].toUpperCase()\n                    );\n                  })[0]\n                })\n              );\n            });\n          }\n        );\n      })\n      .catch(error => {\n        alert(error);\n        return dispatch(getCompanyInfoFailure(error));\n      });\n  };\n}\n\nexport const GET_COMPANY_INFO = \"GET_COMPANY_INFO\";\nexport const GET_COMPANY_INFO_SUCCESS = \"GET_COMPANY_INFO_SUCCESS\";\nexport const GET_COMPANY_INFO_FAILURE = \"GET_COMPANY_INFO_FAILURE\";\n\nexport const getCompanyInfo = searchValue => ({\n  type: \"GET_COMPANY_INFO\",\n  payload: { searchValue }\n});\n\nexport const getCompanyInfoSuccess = response => ({\n  type: \"GET_COMPANY_INFO_SUCCESS\",\n  payload: response\n});\n\nexport const getCompanyInfoFailure = error => ({\n  type: \"GET_COMPANY_INFO_FAILURE\",\n  payload: { error }\n});\n","import {\n  GET_COMPANY_INFO,\n  GET_COMPANY_INFO_SUCCESS,\n  GET_COMPANY_INFO_FAILURE\n} from \"../actions/getCompanyInfoActions\";\n\nconst initialState = {\n  searchValue: \"\",\n  companies: [],\n  loading: false,\n  error: null\n};\n\nexport default function companyInfoReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_COMPANY_INFO: {\n      return {\n        ...state,\n        searchValue: action.payload.searchValue,\n        loading: true\n      };\n    }\n\n    case GET_COMPANY_INFO_SUCCESS: {\n      const companyData = action.payload;\n      const fetchedCompany = {\n        name: companyData[\"2. name\"],\n        region: companyData[\"4. region\"],\n        symbol: companyData[\"1. symbol\"],\n        time: `${companyData[\"5. marketOpen\"]} - ${\n          companyData[\"6. marketClose\"]\n        } ${companyData[\"7. timezone\"]}`,\n        // Rounding values to 2 digits after comma\n        price: Math.round(companyData[\"05. price\"] * 100) / 100,\n        currency: companyData[\"8. currency\"],\n        change: `${Math.round(companyData[\"09. change\"] * 100) /\n          100} (${Math.round(\n          companyData[\"10. change percent\"].slice(0, -1) * 100\n        ) / 100}%)`,\n        closed: `Closed: ${companyData[\"07. latest trading day\"]}`,\n        domain: companyData.domain,\n        logo: companyData.logo\n      };\n\n      return {\n        ...state,\n        loading: false,\n        // Check if there is no duplicates\n        companies: state.companies\n          .map(company => company.symbol)\n          .includes(fetchedCompany.symbol)\n          ? state.companies\n          : [...state.companies, fetchedCompany]\n      };\n    }\n\n    case GET_COMPANY_INFO_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport companyInfo from \"./companyInfoReducer\";\n\nexport default combineReducers({\n  companyInfo\n});\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCompanyInfo } from \"../../actions/getCompanyInfoActions\";\n\nimport { Form, FormControl, Button } from \"react-bootstrap\";\nimport \"./style.css\";\n\nclass TrackNewCompany extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      company: \"\"\n    };\n  }\n\n  onInputChange = event => {\n    this.setState({ company: event.target.value });\n  };\n\n  onFormSubmit = event => {\n    event.preventDefault();\n\n    this.props.fetchCompanyInfo(this.state.company);\n    this.setState({ company: \"\" });\n    this.props.changeTab();\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>Track new company</h3>\n        <p>Company symbol</p>\n        <Form inline onSubmit={this.onFormSubmit} className=\"track-form\">\n          <FormControl\n            type=\"text\"\n            placeholder=\"Company symbol\"\n            className=\"mr-sm-2\"\n            value={this.state.company}\n            onChange={this.onInputChange}\n          />\n          <span>\n            Provide the stock exchange symbol of a company you want to track\n          </span>\n          <Button type=\"submit\" className={\"track-button\"}>\n            Track\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCompanyInfo: company => dispatch(fetchCompanyInfo(company))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(TrackNewCompany);\n","import React from \"react\";\nimport \"./style.css\";\n\nconst LOGO_SIZE = 64;\n\nconst getChangeColor = change =>\n  change[0] === \"-\" ? \"change-red bolded\" : \"change-green bolded\";\n\nconst CompanyInfo = ({ company }) => (\n  <div className=\"company-container\">\n    <img\n      className=\"company-image\"\n      src={company.logo}\n      alt={`${LOGO_SIZE}x${LOGO_SIZE}`}\n    />\n    <div className=\"company-info\">\n      <div className=\"company-info-row\">\n        <span className=\"company-name\">{company.name}</span>\n        <span> {company.symbol}</span>\n        <span> {company.domain}</span>\n      </div>\n      <div className=\"company-info-row\">\n        <span> {company.region}</span>\n        <span> {company.time}</span>\n      </div>\n      <div className=\"company-info-row\">\n        <span className=\"bolded\">{company.price}</span>\n        <span> {company.currency}</span>\n        <span className={getChangeColor(company.change)}>\n          {\" \"}\n          {company.change}\n        </span>\n        <span> {company.closed}</span>\n      </div>\n    </div>\n  </div>\n);\n\nexport default CompanyInfo;\n","import React from \"react\";\nimport \"./style.css\";\nimport CompanyInfo from \"./companyInfo/CompanyInfo\";\n\nconst Companies = ({ companies, onClick }) => {\n  return (\n    <div>\n      <h3>Companies</h3>\n      {companies && companies.length ? (\n        companies.map(company => (\n          <CompanyInfo company={company} key={company.name} />\n        ))\n      ) : (\n        <div>\n          <p>\n            There are no companies yet.{\" \"}\n            <span onClick={onClick} className=\"link\">\n              Track your first company.\n            </span>\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Companies;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport TrackNewCompany from \"../trackNewCompany/TrackNewCompany\";\nimport Companies from \"../companies/Companies\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      trackNewCompanyIsActive: false\n    };\n  }\n\n  switchToTackNewCompany = (isActive = true) => {\n    this.setState({ trackNewCompanyIsActive: isActive });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">Stock Tracker</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link onClick={this.switchToTackNewCompany}>\n                Track new company\n              </Nav.Link>\n              <Nav.Link onClick={() => this.switchToTackNewCompany(false)}>\n                Companies\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        {this.state.trackNewCompanyIsActive ? (\n          <TrackNewCompany\n            changeTab={() => this.switchToTackNewCompany(false)}\n          />\n        ) : this.props.loading ? (\n          <div className=\"loader\">\n            <i className=\"fas fa-spinner fa-spin fa-5x fa-fw\" />\n            <span className={\"loading-text\"}>Loading...</span>\n          </div>\n        ) : (\n          <Companies\n            companies={this.props.companies}\n            onClick={this.switchToTackNewCompany}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  companies: state.companyInfo.companies,\n  loading: state.companyInfo.loading\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport App from \"./components/main/App\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}