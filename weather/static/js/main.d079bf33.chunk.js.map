{"version":3,"sources":["actions/weatherActions.js","helpers/temp.js","reducers/weatherReducer.js","reducers/index.js","components/searchBar/SearchBar.js","components/currentWeather/CurrentWeather.js","components/lineChart/LineChart.js","components/main/App.js","serviceWorker.js","index.js"],"names":["ROOT_URL","concat","handleErrors","response","ok","Error","statusText","GET_WEATHER_REQUEST","GET_WEATHER_REQUEST_SUCCESS","GET_WEATHER_REQUEST_FAILURE","getWeatherRequest","city","type","payload","getWeatherRequestSuccess","getWeatherRequestFailure","error","getTempInCelsius","temp","Math","round","initialState","currentWeather","icon","weatherForecast","days","tempData","humidityData","loading","combineReducers","weather","state","arguments","length","undefined","action","Object","objectSpread","weatherData","list","dayLabels","map","item","dt_txt","slice","main","humidity","tempSeries","labels","series","toConsumableArray","humiditySeries","id","SearchBar","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","fetchAPI","react_default","a","createElement","Navbar","bg","Brand","Nav","className","Form","inline","onSubmit","FormControl","placeholder","onChange","Button","variant","Component","connect","dispatch","url","fetch","then","json","data","catch","CurrentWeather","_ref","LineChart","title","options","width","height","hight","max","apply","flat","low","min","axisX","offset","labelInterpolationFnc","index","dist_default","App","_this$props","currentWeatherIcon","currentWeatherTemp","searchBar_SearchBar","currentWeather_CurrentWeather","lineChart_LineChart","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","components_main_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d079bf33.chunk.js","sourcesContent":["const API_KEY = \"2bc56728817d88f15b17efb38cf8c7df\";\nconst ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n\nexport function fetchAPI(city) {\n  return dispatch => {\n    const url = `${ROOT_URL}&q=${city}`;\n    dispatch(getWeatherRequest(city));\n\n    return fetch(url)\n      .then(handleErrors)\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        return dispatch(getWeatherRequestSuccess(data));\n      })\n      .catch(error => dispatch(getWeatherRequestFailure(error)));\n  };\n}\n\n// Handle HTTP errors\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response;\n}\n\nexport const GET_WEATHER_REQUEST = \"GET_WEATHER_REQUEST\";\nexport const GET_WEATHER_REQUEST_SUCCESS = \"GET_WEATHER_REQUEST_SUCCESS\";\nexport const GET_WEATHER_REQUEST_FAILURE = \"GET_WEATHER_REQUEST_FAILURE\";\n\nexport const getWeatherRequest = city => ({\n  type: \"GET_WEATHER_REQUEST\",\n  payload: { city }\n});\n\nexport const getWeatherRequestSuccess = response => ({\n  type: \"GET_WEATHER_REQUEST_SUCCESS\",\n  payload: { response }\n});\n\nexport const getWeatherRequestFailure = error => ({\n  type: \"GET_WEATHER_REQUEST_FAILURE\",\n  payload: { error }\n});\n","export const getTempInCelsius = temp => Math.round(temp - 273);\n","import {\n  GET_WEATHER_REQUEST,\n  GET_WEATHER_REQUEST_SUCCESS,\n  GET_WEATHER_REQUEST_FAILURE\n} from \"../actions/weatherActions\";\nimport { getTempInCelsius } from \"../helpers/temp\";\n\nconst initialState = {\n  city: \"\",\n  currentWeather: {\n    icon: \"\",\n    temp: 0\n  },\n  weatherForecast: {\n    days: [],\n    tempData: [],\n    humidityData: []\n  },\n  loading: true,\n  error: null\n};\n\nexport default function responsesReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_WEATHER_REQUEST: {\n      return {\n        ...state,\n        city: action.payload.city,\n        loading: true\n      };\n    }\n\n    case GET_WEATHER_REQUEST_SUCCESS: {\n      const weatherData = action.payload.response;\n      const currentWeather = weatherData.list[0];\n\n      const dayLabels = weatherData.list.map(item => item.dt_txt.slice(5, -8));\n      const tempData = weatherData.list.map(item =>\n        getTempInCelsius(item.main.temp)\n      );\n      const humidityData = weatherData.list.map(item => item.main.humidity);\n\n      const tempSeries = {\n        labels: dayLabels,\n        series: [[...tempData]]\n      };\n\n      const humiditySeries = {\n        labels: dayLabels,\n        series: [[], [...humidityData]]\n      };\n\n      return {\n        ...state,\n        loading: false,\n        currentWeather: {\n          temp: getTempInCelsius(currentWeather.main.temp),\n          icon: currentWeather.weather[0].id\n        },\n        weatherForecast: {\n          dayLabels: dayLabels,\n          tempSeries: tempSeries,\n          humiditySeries: humiditySeries\n        }\n      };\n    }\n\n    case GET_WEATHER_REQUEST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport weather from \"./weatherReducer\";\n\nexport default combineReducers({\n  weather\n});\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchAPI } from \"../../actions/weatherActions\";\n\nimport { Navbar, Nav, Form, FormControl, Button } from \"react-bootstrap\";\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      city: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAPI(\"warsaw\");\n  }\n\n  onInputChange = event => {\n    this.setState({ city: event.target.value });\n  };\n\n  onFormSubmit = event => {\n    event.preventDefault();\n\n    this.props.fetchAPI(this.state.city);\n    this.setState({ city: \"\" });\n  };\n\n  render() {\n    return (\n      <Navbar bg=\"light\">\n        <Navbar.Brand>Weather</Navbar.Brand>\n        <Nav className=\"mr-auto\" />\n        <Form inline onSubmit={this.onFormSubmit}>\n          <div className=\"search\">\n            <FormControl\n              type=\"text\"\n              placeholder=\"Type city name\"\n              className=\"mr-sm-2\"\n              value={this.state.city}\n              onChange={this.onInputChange}\n            />\n            <Button variant=\"outline-success\" type=\"submit\">\n              Go!\n            </Button>\n          </div>\n        </Form>\n      </Navbar>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchAPI: city => dispatch(fetchAPI(city))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchBar);\n","import React from \"react\";\nimport \"./style.css\";\n\nconst CurrentWeather = ({ icon, temp, city }) => {\n  return (\n    <div className={\"current-weather-container\"}>\n      <h4>\n        Current weather conditions for <p className={\"city-name\"}>{city}</p>\n      </h4>\n      <div className=\"current-weather\">\n        <i className={\"wi wi-owm-\" + icon} />\n        <div className=\"current-weather-info\">\n          <p>{temp + \"°C\"}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CurrentWeather;\n","import React from \"react\";\nimport ChartistGraph from \"react-chartist\";\nimport \"./style.css\";\n\nconst LineChart = ({ data, title }) => {\n  const type = \"Line\";\n\n  const options = {\n    width: \"70%\",\n    height: \"150px\",\n    hight: Math.max(...data.series.flat()) + 5,\n    low: Math.min(...data.series.flat()) - 5,\n    axisX: {\n      offset: 70,\n      labelInterpolationFnc: function(value, index) {\n        return index % 8 === 0 ? value : null;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h4>{title}</h4>\n      <ChartistGraph data={data} options={options} type={type} />\n    </div>\n  );\n};\n\nexport default LineChart;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport SearchBar from \"../searchBar/SearchBar\";\nimport CurrentWeather from \"../currentWeather/CurrentWeather\";\nimport LineChart from \"../lineChart/LineChart\";\n\nclass App extends Component {\n  render() {\n    const {\n      currentWeatherIcon,\n      currentWeatherTemp,\n      city,\n      tempSeries,\n      humiditySeries\n    } = this.props;\n\n    return (\n      <div className=\"App\">\n        <SearchBar />\n\n        {this.props.loading ? (\n          <div className=\"loader\">\n            <i className=\"fa fa-refresh fa-spin fa-5x fa-fw\" />\n            <span className={\"loading-text\"}>Loading...</span>\n          </div>\n        ) : (\n          <div>\n            <CurrentWeather\n              icon={currentWeatherIcon}\n              temp={currentWeatherTemp}\n              city={city}\n            />\n            <LineChart data={tempSeries} title={\"Temperature in 5 days\"} />\n            <LineChart data={humiditySeries} title={\"Humidity in 5 days\"} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loading: state.weather.loading,\n  city: state.weather.city,\n  currentWeatherTemp: state.weather.currentWeather.temp,\n  currentWeatherIcon: state.weather.currentWeather.icon,\n  tempSeries: state.weather.weatherForecast.tempSeries,\n  humiditySeries: state.weather.weatherForecast.humiditySeries\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport App from \"./components/main/App\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}